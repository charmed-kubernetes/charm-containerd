#!/usr/local/sbin/charm-env python3

from charmhelpers.core.hookenv import (
    action_set,
    action_get,
    action_fail,
    config,
)

from charmhelpers.fetch import (
    apt_hold,
    apt_install,
    apt_update,
    apt_unhold,
)

from charmhelpers.fetch.ubuntu_apt_pkg import PkgVersion

from charmhelpers.core.host import service_restart

from charms.reactive import is_state, remove_state

from reactive.containerd import CONTAINERD_PACKAGE, apt_packages, configure_nvidia


def _dry_run():
    """Determine if a new package is available."""
    apt_update(fatal=True)
    all_packages = [CONTAINERD_PACKAGE]

    if is_state("containerd.nvidia.ready"):
        all_packages += config("nvidia_apt_packages").split()

    search = apt_packages(all_packages)
    if CONTAINERD_PACKAGE not in search:
        action_fail(f"{CONTAINERD_PACKAGE} not found in apt.")
        return

    result = {}
    for name, pkg in search.items():
        available, installed = map(PkgVersion, (pkg.version, pkg.current_ver.ver_str))
        result[f"{name}.available"] = available.version
        result[f"{name}.installed"] = installed.version
        result[f"{name}.upgrade-available"] = available > installed

    action_set(result)



def _upgrade():
    """Do actual upgrade."""
    try:
        apt_update(fatal=True)
        apt_unhold(CONTAINERD_PACKAGE)
        apt_install(CONTAINERD_PACKAGE, fatal=True)
        apt_hold(CONTAINERD_PACKAGE)

        if is_state("containerd.nvidia.ready"):
            configure_nvidia(reconfigure=False)

        service_restart(CONTAINERD_PACKAGE)

        remove_state('containerd.version-published')
        action_set({'runtime': CONTAINERD_PACKAGE})

    except Exception as e:
        action_fail(e)



def main():
    """Upgrade containerd to the latest in apt."""
    if action_get().get("dry-run"):
        _dry_run()
    else:
        _upgrade()


if __name__ == '__main__':
    main()
